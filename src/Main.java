import java.util.Scanner;

public class Main {
    // В языке Java все исключения являются объектами, и могут быть
    // вызваны не только системой, но и создаваться самим разработчиком.
    // Exeptions и Errors являются потомками класса Throwable.
    // Exeptions являются результатом проблем в программе, и могут быть
    // обработаны. А вот Errors являются более серьезными проблемами,
    // которые не следует пытаться обрабатывать в программе, поскольку
    // они связаны с проблемами уровня JVM.
    // В Java существует 3 вида исключений:
    // 1 - контролируемые (все подклассы Exeptions, кроме RtE);
    // 2 - неконтролируемые (Errors);
    // 3 - исключения времени выполнения (Runtime Exeptions == RtE).
    public static void main(String[] args) {

        // !!!ТЕЛО ПЕРВИЧНОГО МЕТОДА main ПЕРЕНЕСЕНО В КЛАСС PreMain!!!

        // Обработка исключений может быть произведена с помощью операторов
        // "try/catch". Для этого надо выделить часть кода, при исполнении
        // которой возникает исключение и нажать сочетание клавиш Ctrl+Alt+T,
        // и выбрать в списке пункт "try/catch". Теперь вместо стандартного
        // сообщения об ошибке будет выполнятся блок "catch", параметром
        // которого является объект "e". В блок "try" при этом помещается тот
        // фрагмент программы, где потенциально может возникнуть исключение.
        // Одному блоку "try" может соответствовать сразу несколько блоков
        // "catch".
        int[] m = {-1,0,1};
        // Массивом m задается диапазон допустимых значений.
        int a = 1;
        try {
            Scanner sc = new Scanner(System.in);
            a = sc.nextInt();
            m[a-1] = 4/a;
            System.out.println(m[a]);
        } catch (ArithmeticException e) {
            System.out.println("Произошла недопустимая арифметическая операция.");
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Обращение по недопустимому индексу массива.");
        }
        // Для обработки других возможных исключений можно конечно создавать блоки
        // "catch" для каждого исключения, но можно использовать суперкласс
        // Exeption.
        catch (Exception e) {
            System.out.println("Произошло еще какое-то исключение.");
        }
        // С учетом иерархии классов необходимо сначала обрабатывать более частные
        // исключения, а затем уже - более общие. Поскольку если обработать сначала
        // общие исключения, то программа никогда не будет обрабатывать частные
        // исключения, описанные далее по коду.

        // Блок "finally" может быть необязательным при добавлении к блокам "try" и
        // "catch". Помещенные в него команды будут выполняться в любом случае, вне
        // зависимости от того, произошло исключение или нет. При этом, при
        // возникновении необработанного исключения оставшаяся после генерации этого
        // исключения часть программы не выполняется.
        // Например, если исключение возникло в процессе каких-то длительных
        // вычислений, в блоке "finally" можно показать или сохранить промежуточные
        // результаты.
    }
}
